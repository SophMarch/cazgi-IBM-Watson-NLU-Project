{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","resObject","Object","entries","this","props","emotions","className","map","value","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","setState","renderTextBox","sendForSentimentAnalysis","url","fetch","then","response","text","data","output","style","color","fontSize","sendForEmotionAnalysis","json","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QA4BeA,E,4JAxBX,WACI,IAAIC,EAAYC,OAAOC,QAAQC,KAAKC,MAAMC,UAC5C,OACE,8BAEE,uBAAOC,UAAU,uBAAjB,SACE,gCAEIN,EAAUO,KAAI,SAACC,GAAD,OACV,mCACI,+BACQ,6BAAKA,EAAM,KACX,6BAAKA,EAAM,uB,GAbhBC,IAAMC,WCwFlBC,E,4MArFbC,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,WAAU,G,EAGlBC,eAAiB,WACfC,SAASC,eAAe,aAAad,MAAQ,GACtB,QAApB,EAAKI,MAAMK,MACZ,EAAKM,SAAS,CAACV,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,OACNC,gBAAgB,GAChBC,WAAU,K,EAKdK,cAAgB,WACdH,SAASC,eAAe,aAAad,MAAQ,GACtB,SAApB,EAAKI,MAAMK,MACZ,EAAKM,SAAS,CAACV,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,MACNC,gBAAgB,GAChBC,WAAU,K,EAKdM,yBAA2B,WACzB,EAAKF,SAAS,CAACJ,WAAU,IACzB,IAAIO,EAAM,IAGRA,EADqB,QAApB,EAAKd,MAAMK,KACNS,EAAI,sBAAsBL,SAASC,eAAe,aAAad,MAE/DkB,EAAI,wBAAwBL,SAASC,eAAe,aAAad,MAEzEmB,MAAMD,GAAKE,MAAK,SAACC,GACbA,EAASC,OAAOF,MAAK,SAACG,GACtB,EAAKR,SAAS,CAACL,gBAAgBa,IAC/B,IAAIC,EAASD,EAEXC,EADU,aAATD,EACQ,qBAAKE,MAAO,CAACC,MAAM,QAAQC,SAAS,IAApC,SAA0CJ,IACjC,aAATA,EACA,qBAAKE,MAAO,CAACC,MAAM,MAAMC,SAAS,IAAlC,SAAwCJ,IAExC,qBAAKE,MAAO,CAACC,MAAM,SAASC,SAAS,IAArC,SAA2CJ,IAEtD,EAAKR,SAAS,CAACL,gBAAgBc,W,EAIrCI,uBAAyB,WAEvB,EAAKb,SAAS,CAACJ,WAAU,IACzB,IAAIO,EAAM,IAERA,EADqB,QAApB,EAAKd,MAAMK,KACNS,EAAI,oBAAoBL,SAASC,eAAe,aAAad,MAE7DkB,EAAI,uBAAuBL,SAASC,eAAe,aAAad,MAExEmB,MAAMD,GAAKE,MAAK,SAACC,GACfA,EAASQ,OAAOT,MAAK,SAACG,GACtB,EAAKR,SAAS,CAACL,gBAAgB,cAAC,EAAD,CAAcb,SAAU0B,a,4CAK3D,WACE,OACE,sBAAKzB,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAegC,QAASnC,KAAKiB,eAA/C,kBACE,wBAAQd,UAAU,eAAgBgC,QAASnC,KAAKqB,cAAhD,iBACA,uBAAK,uBACJrB,KAAKS,MAAMC,UACZ,uBACA,wBAAQP,UAAU,cAAcgC,QAASnC,KAAKsB,yBAA9C,+BACA,wBAAQnB,UAAU,cAAcgC,QAASnC,KAAKiC,uBAA9C,6BACA,uBACKjC,KAAKS,MAAMM,uB,GAhFNT,IAAMC,WCOT6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BiB,K","file":"static/js/main.f2297d75.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n        let resObject = Object.entries(this.props.emotions);\n      return (  \n        <div>\n          {/*You can remove this line and the line below. */}\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n                resObject.map((value) => \n                    <>\n                        <tr>\n                                <td>{value[0]}</td>\n                                <td>{value[1]}</td>\n                        </tr>\n                    </>\n                )\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    fetch(url).then((response)=>{\n        response.text().then((data)=>{\n        this.setState({sentimentOutput:data});\n        let output = data;\n        if(data === \"positive\") {\n          output = <div style={{color:\"green\",fontSize:20}}>{data}</div>\n        } else if (data === \"negative\"){\n          output = <div style={{color:\"red\",fontSize:20}}>{data}</div>\n        } else {\n          output = <div style={{color:\"yellow\",fontSize:20}}>{data}</div>\n        }\n        this.setState({sentimentOutput:output});\n      })});\n  }\n\n  sendForEmotionAnalysis = () => {\n\n    this.setState({sentiment:false});\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    fetch(url).then((response)=>{\n      response.json().then((data)=>{\n      this.setState({sentimentOutput:<EmotionTable emotions={data}/>});\n  })})  ;\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}